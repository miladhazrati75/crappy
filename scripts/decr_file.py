import sys
import os
import struct
import os.path                                                                                                
from Crypto.Cipher import Salsa20
from tools import get_ransom_data, file_iterator
from wincrypt import CryptImportKey, CryptDecrypt
from wincrypt import CryptImportKey, CryptDecrypt

rsa = b'\x07\x02\x00\x00\x00\xa4\x00\x00RSA2\x00\x08\x00\x00\x01\x00\x01\x00m\xc2\xf3\x82\xa9~\xeb\xc3\xf3\xfd?\xf3jHT\x04{\xad\xb5L\x00\x1f\x8e\x81\xb6QL:v\x02\xc3Ej:\xeaD\xac\x00\xd8\xe4\xad\xbeB\xc5\xdc\xb6\xcdo_\xdf\xeb\xee\xd1;\xac\xa2\xa5\x1f\xc1\xde\x8c\xcb\xcc\t\xd0\x81\x1d\xd0\xfaI\xd1]H\xb0q9\xd3\x8f\xb3\xa4m\xe8/\xc8\x0cK\xb4\xcf\xaft/L\xc2\xcct\xc4\xca\x1f\xff\x1f\xd8\xb0\xc2\x8d\xf0\xdfjO\xd9\xcf?\xed\xceo4(\x9d\x9e9\rcO\x1f\xb4\x06\x7f\xa3\xf9\x8d\x0b\xd0\xac\xe8\x89Rv*\x91[\x0b\x91\xb2\xd9\xb9#`\xf2\xea\x91\x9e\x93\xc7\x83M\xef.\x9e\x91i\x1c-3-\xc98\x08\xa8\x87!\x88\x90x\x03\xee\xf1\x12\xd2$\x97\xcd1\xe5,\x84\xe0t\xec\xc8o\xc7\xf62\nB\xe6\'Q\xebYDF\x08j\x0b\x1c\xac\x9b_`\xb8\xde\x89\x90\xb3\xc1\xd9joB\xa3\x03\xb5b\xf4\x169\x8d\xc8\xb9lH\xeb\x18\xa0NyP^/V\xad(\xea\x85\x95\xd8\x01\xedll\xe1)\x06\xc3\x82\xdb\xd3\x10\xac\xd1eL$\x90V\x14\x96%0\xda\x92l\x04\xf0\x98\xa7kb\x1af\xe0\x83\xc0!&\xb7\x12\x17\xcaB1\xc1\xf6\xf3JG#\xe6\xfb\xdc\xc2\x9b\x0f\xcd\xcfX\x03\x06V1\x19\xe4}\x1b\x0b\xdd\xfd\x99\xf3U\xae\xce)&\xa89\xd4\xce\xb8\xf1\x10\x91\x84\xc5<\x9d\x8b\xe6\xcd\x90\xbf\xb52+s\xb3K\x95Z\xdd\xea\xfe\xdb@\xc1\xd8\xd5\xa6\xfcW\x95\xcdr\xf0v\x1c\x04#\xca\xcc\xfa\xba\xa5\xbai\x8c\x05e\t\xc0\xf3u@\xfd\xbf\xd7\x86Q\x8d\xa2\x85dS\xc1\xc9\x88CVT\x95\r\x14\x91yvt\xc6\x18\xf3\xf5\x98\x16\x18\xd2B\x03\xde\r\xf2U[Q\xb6v4t\xeb\xef\x11\x98\xf6j/"]~\xcd\xd7\xc5^\xf4\xef\xf8\xa9\xbb\xdao\xb1\x90t\x87{\xf2\x11\xaf`\xeb,\xc4F\xb50\xe3\xc2\xbbZ\x17\x07M\x803a5\x10\x01N[\x13s[\x12\x9fzD\xee\x8c\n\xff\xc1\xcc\xbd\x01\xbc+v\x1f|E\x8d\x1b\xd2\x1e\x0e\x80\xd2\x14("Y\x91\xe4\xdd\xb73\x05\x90\x01\xf5\n\x93#|\xc5\xde\xcc\x7f\x95$4\xac\xc0\n\x06\xc4\x95\rmf&\xce\x957\x98\\\xe6\x84\xbb\xf0\xb4\r(\xf9\xa2dj\x9c\x0ffm@\xeb\xcdY\x0b\xd9\xfd\xb5\xf9D \x9c\xa3|{\x92\x0e\xfd\xd9 ,_D\xc8\xec\x84\xbeb\xe9\xebx\x00{\xc6J[\xb3G\xe1\x01bM\xcc\xd2\x91\x91\x1b\xb6!c\xad/\xb7\x8fy\xd9\x86\xa2!\xf8\x8e\xba\xe3\x92\x1d\xba\xac\xc0\xaf}\xb3?\x1b\xfc8\'\x87T\x85%\xe5Sa\x1d\x9e\x84\xfaAM\x0eZT\xa7\x0b\x0c?\x95\xbb\xe4\xcaZ]w\xa8\xf9\x91\x81\xfaNuD\xcd\x86\xe0\x84\xec\x1cz\x17#\xb4\n\x16\x10!\xfd\xaf\x8b\xc5\xf6\x9a\xd1U\xf6\x17\xca\x9b\xbf\xa9\xb2%\x8e\x90\x8d\x99\x1b&\xad\xa6\x03\x91\x7f\xb4\xb9\xd4\xd1\xf4\x82\xd3*\xb6k\x8b\x8cUx5\x9bO@i\x96T3\n\x10\x9d\xe8\xa5+\xbf\x9d\xba%\x9b\x98ziU\xc5/\xfa\xfb\xf9\x8e-C\xf9D\x8e\xa7Qh\xbf\xa1)R\xf2d \xc1\x8ctkb\x9f\x93Q\xc60\x88\xeb\x18\xed\x84BKr\xec\xb8\x851\xffD\xd7)\xea-\xa0\xf8S?\xb1\xcd\xa8X\xddL\x0f?\xd0\xdd\xaaC1gw\x85y\xb7T\xfa\xecTwL\x06\xa9qYD%\xdfZ\x01\x08%\xees\xe3t\xd7cw\xd2=t\r\xe4\xae\x18IO\xb9A\x14;\xa4\x7f\x8c^\x99<\x83\x0f\xdd*\xde/\xef\xe7\xb20j\xb1\x94\xbbn\x89\xdd\xae\xa2\xf6\x1bB\xef\xbc\x96\x07Z\xd9\xf7\xf6\x8fDQ.\xed\x1b\xf9[\xa8ZL\x1eQ,h4\x81\xda^\x17\'\xb0\xbb8\xdfg\x80\xdb\x0f-\xc5\x81H\xd7\xeb\x94(\xad^r\xfd[\xa2Y/\x91\xa8\xb6\x8a\x9ew)Y\x96\xf7\xb89\xf9\xf6S^\x03D=\x1e\xeft\xb7\x95\x89\x8b\xa5\x0f\x84Y \xdb\xd9\x99\x02\xe0e\x0b\xcfm/\x9c\xc0\xc2J\x80N\xd8\x9d\x14\x10N\xbfAQ\xbf\xb5\xdf\xd3\xd0c\x9c:>\x84d\xa55\x1d\xa0t\x9d}\xefjj$\xec\xde\xfc\xb7\xb8!\xed\xe2dy86y\xcfn[\xdbm\xb7\xc0uUn\x17S_4\xd9\x8fQ\x81\x9b\xc6\xf4\xab\xe3\xe9H*n\xfe]\x88}\xf7o\xe3J[\xee\xe7\xe4\xd8\x82\xc6~\xdb\xcf\x8d\x95[\xc0\x13c\x00\xf5W,\xf0\xf2l,m\x03li\x93\x88\x1b\xcb\xf0\xcd\xf5\xc0N\x06\xe1\x100\xc8\x92\x9eX\xd0\xee\xc7\xfa@\x16\x92%\xaf\xef\x82\xfc\xbb\xed\\\xa23\xc9\t\xc4\xa0c\\\xea\xd4\x94l\xfe\xe0\xb8\xbcyGfa>\x96\xf07.\xb6>I\x98\xc0'

def decryption_RSA_key():
    for file in os.listdir('.'):
        if '-MANUAL.txt' in file:
            ext = file.split('-')[0].lower()
            ransom_path = os.getcwd() + '/' + file

    priv = CryptImportKey(rsa)
    if priv is None:
        print("[X] ERROR: unable to read private RSA master key", file=sys.stderr)
        sys.exit(1)

    rkey = get_ransom_data(ransom_path,"GANDCRAB KEY")
    privateKeySize = struct.unpack("<I", rkey[:4])[0]
    print("[+] Priv key size: %d" % privateKeySize)
    # Next 256 bytes are RSA-encrypted salsa key
    salsakey = rkey[4:(4+256)]
    salsakey = CryptDecrypt(priv, salsakey)[:32]
    print("[+] Salsa key: %s" % salsakey.hex())
    # Next 256 bytes are RSA-encrypted
    salsanonce = rkey[(4+256):(4+2*256)]
    salsanonce = CryptDecrypt(priv, salsanonce)[:8]
    print("[+] Salsa nonce: %s" % salsanonce.hex())

    print("[+] Decrypting RSA private user key...")
    encrRsaPriv = rkey[(4+2*256):]
    assert(len(encrRsaPriv) == privateKeySize)
    rsaPriv = Salsa20.new(key=salsakey, nonce=salsanonce).decrypt(encrRsaPriv)
    PK = CryptImportKey(rsaPriv)
    if not PK.valid:
        print("[X] ERROR: invalid RSA private key after decryption. Has this ransom been generated by Gandcrab 5.2?")
        sys.exit(1)

    print("[+] RSA private key details:")
    print("[+] p  = %s" % hex(PK.p))
    print("[+] q  = %s" % hex(PK.q))
    print("[+] d  = %s" % hex(PK.d))
    print("[+] dp = %s" % hex(PK.dP))
    print("[+] dq = %s" % hex(PK.dQ))
    print("[+] iq = %s" % hex(PK.iQ))
    print("[+] N  = %s" % hex(PK.N))

    print("[+] RSA private user key captured!")

    return rsaPriv, ext

def decryption(privRSA, ext, drives):
    privUserRsa = CryptImportKey(privRSA)
    assert(privUserRsa)

    padding_end = 28
    pos_nonce = padding_end+256
    pos_key   = padding_end+256*2

    for drive in drives:
        for (path, dirs, files) in os.walk('/home/milad/CERT/scripts/crappy'):
            for file in files:
                if ext in file:
                    os.chdir(path)
                    fencr = open(file,"rb")
                    fencr.seek(-padding_end, 2)
                    pad = fencr.read(padding_end)
                    print(file)

                    if (pad[20:] != bytes.fromhex("1829899381820300")):
                        print("[X] This file doesn't seem to be encrypted with Gandcrab 5.2!", file=sys.stderr)
                        sys.exit(1)

                    fdecrname = ".".join(file.split(".")[:-1])
                    fdecr = open(fdecrname,"wb")

                    fencr.seek(-pos_nonce, 2)
                    encrNonceData = fencr.read(256)
                    nonceData = CryptDecrypt(privUserRsa, encrNonceData)
                    nonce = nonceData[:8]

                    keyData = fencr.seek(-pos_key, 2)
                    encrKeyData = fencr.read(256)
                    keyData = CryptDecrypt(privUserRsa, encrKeyData)
                    key = keyData[:32]

                    print("[+] Salsa20 key = %s" % key.hex())
                    print("[+] Salsa20 nonce = %s" % nonce.hex())

                    fencr.seek(0, 2)
                    size = fencr.tell()

                    print("[+] Decrypting file...")
                    # Decrypt
                    S = Salsa20.new(key=key, nonce=nonce)
                    for encrData in file_iterator(fencr, 2048, size-pos_key):
                        data = S.decrypt(encrData)
                        fdecr.write(data)

                    fdecr.close()
                    fencr.close()

                    print("[+] Decrypted file written to '%s'." % fdecrname)

if __name__ == '__main__':
    dl = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 
    drives = ['%s:\\' % d for d in dl if os.path.exists('%s:' % d)]
    rsaPriv, ext = decryption_RSA_key()
    decryption(rsaPriv, ext, drives)