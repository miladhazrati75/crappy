import sys
import os
import struct
import os.path                                                                                                
from Crypto.Cipher import Salsa20
from tools import get_ransom_data, file_iterator
from wincrypt import CryptImportKey, CryptDecrypt
from wincrypt import CryptImportKey, CryptDecrypt

def decryption_RSA_key():
    for file in os.listdir('.'):
        if 'MANUAL.txt' in file:
            ext = file.split('-')[0]
            ransom_path = os.getcwd() + '/' + file

    priv = CryptImportKey(open('rsa_master_priv','rb').read())
    if priv is None:
        print("[X] ERROR: unable to read private RSA master key", file=sys.stderr)
        sys.exit(1)

    rkey = get_ransom_data(ransom_path,"GANDCRAB KEY")
    privateKeySize = struct.unpack("<I", rkey[:4])[0]
    print("[+] Priv key size: %d" % privateKeySize)
    # Next 256 bytes are RSA-encrypted salsa key
    salsakey = rkey[4:(4+256)]
    salsakey = CryptDecrypt(priv, salsakey)[:32]
    print("[+] Salsa key: %s" % salsakey.hex())
    # Next 256 bytes are RSA-encrypted
    salsanonce = rkey[(4+256):(4+2*256)]
    salsanonce = CryptDecrypt(priv, salsanonce)[:8]
    print("[+] Salsa nonce: %s" % salsanonce.hex())

    print("[+] Decrypting RSA private user key...")
    encrRsaPriv = rkey[(4+2*256):]
    assert(len(encrRsaPriv) == privateKeySize)
    rsaPriv = Salsa20.new(key=salsakey, nonce=salsanonce).decrypt(encrRsaPriv)
    PK = CryptImportKey(rsaPriv)
    if not PK.valid:
        print("[X] ERROR: invalid RSA private key after decryption. Has this ransom been generated by Gandcrab 5.2?")
        sys.exit(1)

    print("[+] RSA private key details:")
    print("[+] p  = %s" % hex(PK.p))
    print("[+] q  = %s" % hex(PK.q))
    print("[+] d  = %s" % hex(PK.d))
    print("[+] dp = %s" % hex(PK.dP))
    print("[+] dq = %s" % hex(PK.dQ))
    print("[+] iq = %s" % hex(PK.iQ))
    print("[+] N  = %s" % hex(PK.N))

    print("[+] RSA private user key captured!")

    return rsaPriv, ext

def decryption(privRSA, ext, drives):
    privUserRsa = CryptImportKey(privRSA)
    assert(privUserRsa)

    padding_end = 28
    pos_nonce = padding_end+256
    pos_key   = padding_end+256*2

    for drive in drives:
        for (path, dirs, files) in os.walk(drive):
            for file in files:
                if ext in file:
                    os.chdir(path)
                    fencr = open(file,"rb")
                    fencr.seek(-padding_end, 2)
                    pad = fencr.read(padding_end)

                    if (pad[20:] != bytes.fromhex("1829899381820300")):
                        print("[X] This file doesn't seem to be encrypted with Gandcrab 5.2!", file=sys.stderr)
                        sys.exit(1)

                    fdecrname = ".".join(file.split(".")[:-1])
                    fdecr = open(fdecrname,"wb")

                    fencr.seek(-pos_nonce, 2)
                    encrNonceData = fencr.read(256)
                    nonceData = CryptDecrypt(privUserRsa, encrNonceData)
                    nonce = nonceData[:8]

                    keyData = fencr.seek(-pos_key, 2)
                    encrKeyData = fencr.read(256)
                    keyData = CryptDecrypt(privUserRsa, encrKeyData)
                    key = keyData[:32]

                    print("[+] Salsa20 key = %s" % key.hex())
                    print("[+] Salsa20 nonce = %s" % nonce.hex())

                    fencr.seek(0, 2)
                    size = fencr.tell()

                    print("[+] Decrypting file...")
                    # Decrypt
                    S = Salsa20.new(key=key, nonce=nonce)
                    for encrData in file_iterator(fencr, 2048, size-pos_key):
                        data = S.decrypt(encrData)
                        fdecr.write(data)

                    fdecr.close()
                    fencr.close()

                    print("[+] Decrypted file written to '%s'." % fdecrname)

if __name__ == '__main__':
    dl = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 
    drives = ['%s:\\' % d for d in dl if os.path.exists('%s:' % d)]
    rsaPriv, ext = decryption_RSA_key()
    decryption(rsaPriv, ext, drives)